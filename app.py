import gradio as gr
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.tree import DecisionTreeClassifier

# Dataset de ejemplo
correos = [
    "Â¡Gana dinero fÃ¡cil ahora!",
    "ReuniÃ³n importante maÃ±ana",
    "Haz clic para reclamar tu premio",
    "Te envÃ­o el informe solicitado",
    "Compra ahora con 70% de descuento",
    "Hola, Â¿puedes revisar esto por favor?",
    "ActualizaciÃ³n importante de tu cuenta",
    "Oferta limitada solo hoy",
    "Gracias por tu ayuda ayer",
    "ObtÃ©n un prÃ©stamo sin requisitos"
]
etiquetas = [1, 0, 1, 0, 1, 0, 0, 1, 0, 1]

# Preprocesamiento
vectorizador = TfidfVectorizer()
X = vectorizador.fit_transform(correos)
y = etiquetas

# Modelo
modelo = DecisionTreeClassifier()
modelo.fit(X, y)

# FunciÃ³n con probabilidad
def clasificar_correo(correo):
    vector = vectorizador.transform([correo])
    prediccion = modelo.predict(vector)[0]
    probabilidad = modelo.predict_proba(vector)[0][1]  # Probabilidad de clase "1" (spam)
    resultado = "ðŸš« Spam" if prediccion == 1 else "âœ… No es Spam"
    return f"{resultado}\n\nðŸ“Š Probabilidad de spam: {probabilidad:.2%}"

# Interfaz
iface = gr.Interface(
    fn=clasificar_correo,
    inputs=gr.Textbox(lines=5, placeholder="Escribe el contenido del correo aquÃ­..."),
    outputs="text",
    title="Clasificador de Correos Spam",
    description="Clasifica correos como spam o no spam con probabilidad usando un Ã¡rbol de decisiÃ³n.",
    live=False
)

iface.launch()
